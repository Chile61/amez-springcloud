<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.union.aimei.store.mapper.StoreFollowerMapper">
    <resultMap id="BaseResultMap" type="com.union.aimei.common.model.store.StoreFollower">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="store_id" property="storeId" jdbcType="INTEGER"/>
        <result column="member_id" property="memberId" jdbcType="INTEGER"/>
        <result column="is_enabled" property="isEnabled" jdbcType="BIT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
    id, store_id, member_id, is_enabled, create_time, update_time
  </sql>

    <sql id="BaseAliasColumn">
    id, store_id AS storeId, member_id AS memberId, is_enabled AS isEnabled, create_time AS createTime, 
    update_time AS updateTime
  </sql>

    <!--自定义计算距离SQL语句-->
    <sql id="caculateDistance">
        IFNULL(ROUND(
        6378.138 * 2 * ASIN(
        SQRT(POW(SIN((${point.y} * PI() / 180 - store.store_latitude * PI() / 180) / 2),2) +
        COS(${point.y} * PI() / 180) * COS(store.store_latitude * PI() / 180) * POW(
        SIN((${point.x} * PI() / 180 - store.store_longitude * PI() / 180) / 2),2))) * 1000
        ), 0) AS distance
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from store_follower
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from store_follower
    where id = #{id,jdbcType=INTEGER}
  </delete>

    <insert id="insertSelective" parameterType="com.union.aimei.common.model.store.StoreFollower" useGeneratedKeys="true" keyProperty="id">
        insert into store_follower
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="storeId != null">
                store_id,
            </if>
            <if test="memberId != null">
                member_id,
            </if>
            <if test="isEnabled != null">
                is_enabled,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="storeId != null">
                #{storeId,jdbcType=INTEGER},
            </if>
            <if test="memberId != null">
                #{memberId,jdbcType=INTEGER},
            </if>
            <if test="isEnabled != null">
                #{isEnabled,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.union.aimei.common.model.store.StoreFollower">
        update store_follower
        <set>
            <if test="storeId != null">
                store_id = #{storeId,jdbcType=INTEGER},
            </if>
            <if test="memberId != null">
                member_id = #{memberId,jdbcType=INTEGER},
            </if>
            <if test="isEnabled != null">
                is_enabled = #{isEnabled,jdbcType=BIT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectListByConditions" parameterType="com.union.aimei.common.model.store.StoreFollower" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from store_follower
        <where>
            <if test="storeId != null">
                AND store_id = #{storeId,jdbcType=INTEGER}
            </if>
            <if test="memberId != null">
                AND member_id = #{memberId,jdbcType=INTEGER}
            </if>
            <if test="isEnabled != null">
                AND is_enabled = #{isEnabled,jdbcType=BIT}
            </if>
            <if test="createTime != null">
                AND create_time = #{createTime,jdbcType=TIMESTAMP}
            </if>
            <if test="updateTime != null">
                AND update_time = #{updateTime,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>

    <select id="selectListPageByMemberIdAndLongitudeLatitude" parameterType="com.union.aimei.common.vo.store.app.StoreByMemberIdLongitudeLatitudeVo" resultType="com.union.aimei.common.vo.store.app.StoreByMemberIdLongitudeLatitudeResultVo">
        SELECT
        flow.member_id as memberId ,
        store.id as storeId,
        store.store_banner as storeBanner ,
        store.store_name as storeName,
        store.special_project as specialProject ,
        store.store_label as storeLabel
        <if test="point !=null and point.x != null and point.y !=null">
            ,
            <include refid="caculateDistance"/>
        </if>
        FROM
        store_follower flow,
        store store
        WHERE
        store.store_state = 1
        <if test="memberId != null">
            and flow.member_id = #{memberId,jdbcType=INTEGER}
        </if>
        <if test="storeId != null">
            and flow.store_id = #{storeId,jdbcType=INTEGER}
        </if>
        AND flow.store_id = store.id
        AND flow.is_enabled = TRUE
        AND store.is_enabled = TRUE
        <if test="searchStr != null">
            AND store.store_name like concat(concat('%',#{searchStr}),'%')
        </if>
        ORDER BY
        distance
    </select>

</mapper>