<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.union.aimei.system.mapper.BaseLogsMapper">
    <resultMap id="BaseResultMap" type="com.union.aimei.common.model.system.BaseLogs">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="department_name" jdbcType="VARCHAR" property="departmentName"/>
        <result column="login_time" jdbcType="TIMESTAMP" property="loginTime"/>
        <result column="is_login" jdbcType="BIT" property="isLogin"/>
        <result column="login_ip" jdbcType="VARCHAR" property="loginIp"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, user_name, department_name, login_time, is_login, login_ip, remarks
    </sql>
    <select id="selectByExample" parameterType="com.union.aimei.common.model.system.BaseLogsExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from base_logs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_logs
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from base_logs
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.union.aimei.common.model.system.BaseLogsExample">
        delete from base_logs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.union.aimei.common.model.system.BaseLogs">
        insert into base_logs (id, user_name, department_name,
        login_time, is_login, login_ip,
        remarks)
        values (#{id,jdbcType=INTEGER}, #{userName,jdbcType=VARCHAR}, #{departmentName,jdbcType=VARCHAR},
        #{loginTime,jdbcType=TIMESTAMP}, #{isLogin,jdbcType=BIT}, #{loginIp,jdbcType=VARCHAR},
        #{remarks,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.union.aimei.common.model.system.BaseLogs">
        insert into base_logs
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="departmentName != null">
                department_name,
            </if>
            <if test="loginTime != null">
                login_time,
            </if>
            <if test="isLogin != null">
                is_login,
            </if>
            <if test="loginIp != null">
                login_ip,
            </if>
            <if test="remarks != null">
                remarks,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="departmentName != null">
                #{departmentName,jdbcType=VARCHAR},
            </if>
            <if test="loginTime != null">
                #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isLogin != null">
                #{isLogin,jdbcType=BIT},
            </if>
            <if test="loginIp != null">
                #{loginIp,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                #{remarks,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.union.aimei.common.model.system.BaseLogsExample"
            resultType="java.lang.Long">
        select count(*) from base_logs
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update base_logs
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.departmentName != null">
                department_name = #{record.departmentName,jdbcType=VARCHAR},
            </if>
            <if test="record.loginTime != null">
                login_time = #{record.loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.isLogin != null">
                is_login = #{record.isLogin,jdbcType=BIT},
            </if>
            <if test="record.loginIp != null">
                login_ip = #{record.loginIp,jdbcType=VARCHAR},
            </if>
            <if test="record.remarks != null">
                remarks = #{record.remarks,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update base_logs
        set id = #{record.id,jdbcType=INTEGER},
        user_name = #{record.userName,jdbcType=VARCHAR},
        department_name = #{record.departmentName,jdbcType=VARCHAR},
        login_time = #{record.loginTime,jdbcType=TIMESTAMP},
        is_login = #{record.isLogin,jdbcType=BIT},
        login_ip = #{record.loginIp,jdbcType=VARCHAR},
        remarks = #{record.remarks,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.union.aimei.common.model.system.BaseLogs">
        update base_logs
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="departmentName != null">
                department_name = #{departmentName,jdbcType=VARCHAR},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="isLogin != null">
                is_login = #{isLogin,jdbcType=BIT},
            </if>
            <if test="loginIp != null">
                login_ip = #{loginIp,jdbcType=VARCHAR},
            </if>
            <if test="remarks != null">
                remarks = #{remarks,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.union.aimei.common.model.system.BaseLogs">
        update base_logs
        set user_name = #{userName,jdbcType=VARCHAR},
        department_name = #{departmentName,jdbcType=VARCHAR},
        login_time = #{loginTime,jdbcType=TIMESTAMP},
        is_login = #{isLogin,jdbcType=BIT},
        login_ip = #{loginIp,jdbcType=VARCHAR},
        remarks = #{remarks,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM base_logs LIMIT #{offset},#{limit}
    </select>
    <select id="selectListByConditions" parameterType="com.union.aimei.common.model.system.BaseLogs"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_logs
        <where>
            <if test="userName != null">
                and user_name = #{userName,jdbcType=VARCHAR}
            </if>
            <if test="departmentName != null">
                and department_name = #{departmentName,jdbcType=VARCHAR}
            </if>
            <if test="loginTime != null">
                and login_time = #{loginTime,jdbcType=TIMESTAMP}
            </if>
            <if test="isLogin != null">
                and is_login = #{isLogin,jdbcType=BIT}
            </if>
            <if test="loginIp != null">
                and login_ip = #{loginIp,jdbcType=VARCHAR}
            </if>
            <if test="remarks != null">
                and remarks = #{remarks,jdbcType=VARCHAR}
            </if>
        </where>
    </select>
</mapper>