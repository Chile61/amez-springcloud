<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.union.aimei.system.mapper.BaseRegionMapper">
    <resultMap id="BaseResultMap" type="com.union.aimei.common.model.system.BaseRegion">
        <id column="region_id" jdbcType="INTEGER" property="regionId"/>
        <result column="parent_id" jdbcType="INTEGER" property="parentId"/>
        <result column="region_name" jdbcType="VARCHAR" property="regionName"/>
        <result column="region_type" jdbcType="TINYINT" property="regionType"/>
        <result column="agency_id" jdbcType="SMALLINT" property="agencyId"/>
        <result column="region_sn" jdbcType="VARCHAR" property="regionSn"/>
        <result column="buildin" jdbcType="BIT" property="buildin"/>
        <result column="lastchanged" jdbcType="TIMESTAMP" property="lastchanged"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        region_id, parent_id, region_name, region_type, agency_id, region_sn, buildin, lastchanged
    </sql>
    <select id="selectByExample" parameterType="com.union.aimei.common.model.system.BaseRegionExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from base_region
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_region
        where region_id = #{regionId,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from base_region
        where region_id = #{regionId,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.union.aimei.common.model.system.BaseRegionExample">
        delete from base_region
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.union.aimei.common.model.system.BaseRegion">
        insert into base_region (region_id, parent_id, region_name,
        region_type, agency_id, region_sn,
        buildin, lastchanged)
        values (#{regionId,jdbcType=INTEGER}, #{parentId,jdbcType=INTEGER}, #{regionName,jdbcType=VARCHAR},
        #{regionType,jdbcType=TINYINT}, #{agencyId,jdbcType=SMALLINT}, #{regionSn,jdbcType=VARCHAR},
        #{buildin,jdbcType=BIT}, #{lastchanged,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.union.aimei.common.model.system.BaseRegion">
        insert into base_region
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="regionId != null">
                region_id,
            </if>
            <if test="parentId != null">
                parent_id,
            </if>
            <if test="regionName != null">
                region_name,
            </if>
            <if test="regionType != null">
                region_type,
            </if>
            <if test="agencyId != null">
                agency_id,
            </if>
            <if test="regionSn != null">
                region_sn,
            </if>
            <if test="buildin != null">
                buildin,
            </if>
            <if test="lastchanged != null">
                lastchanged,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="regionId != null">
                #{regionId,jdbcType=INTEGER},
            </if>
            <if test="parentId != null">
                #{parentId,jdbcType=INTEGER},
            </if>
            <if test="regionName != null">
                #{regionName,jdbcType=VARCHAR},
            </if>
            <if test="regionType != null">
                #{regionType,jdbcType=TINYINT},
            </if>
            <if test="agencyId != null">
                #{agencyId,jdbcType=SMALLINT},
            </if>
            <if test="regionSn != null">
                #{regionSn,jdbcType=VARCHAR},
            </if>
            <if test="buildin != null">
                #{buildin,jdbcType=BIT},
            </if>
            <if test="lastchanged != null">
                #{lastchanged,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.union.aimei.common.model.system.BaseRegionExample"
            resultType="java.lang.Long">
        select count(*) from base_region
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update base_region
        <set>
            <if test="record.regionId != null">
                region_id = #{record.regionId,jdbcType=INTEGER},
            </if>
            <if test="record.parentId != null">
                parent_id = #{record.parentId,jdbcType=INTEGER},
            </if>
            <if test="record.regionName != null">
                region_name = #{record.regionName,jdbcType=VARCHAR},
            </if>
            <if test="record.regionType != null">
                region_type = #{record.regionType,jdbcType=TINYINT},
            </if>
            <if test="record.agencyId != null">
                agency_id = #{record.agencyId,jdbcType=SMALLINT},
            </if>
            <if test="record.regionSn != null">
                region_sn = #{record.regionSn,jdbcType=VARCHAR},
            </if>
            <if test="record.buildin != null">
                buildin = #{record.buildin,jdbcType=BIT},
            </if>
            <if test="record.lastchanged != null">
                lastchanged = #{record.lastchanged,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update base_region
        set region_id = #{record.regionId,jdbcType=INTEGER},
        parent_id = #{record.parentId,jdbcType=INTEGER},
        region_name = #{record.regionName,jdbcType=VARCHAR},
        region_type = #{record.regionType,jdbcType=TINYINT},
        agency_id = #{record.agencyId,jdbcType=SMALLINT},
        region_sn = #{record.regionSn,jdbcType=VARCHAR},
        buildin = #{record.buildin,jdbcType=BIT},
        lastchanged = #{record.lastchanged,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.union.aimei.common.model.system.BaseRegion">
        update base_region
        <set>
            <if test="parentId != null">
                parent_id = #{parentId,jdbcType=INTEGER},
            </if>
            <if test="regionName != null">
                region_name = #{regionName,jdbcType=VARCHAR},
            </if>
            <if test="regionType != null">
                region_type = #{regionType,jdbcType=TINYINT},
            </if>
            <if test="agencyId != null">
                agency_id = #{agencyId,jdbcType=SMALLINT},
            </if>
            <if test="regionSn != null">
                region_sn = #{regionSn,jdbcType=VARCHAR},
            </if>
            <if test="buildin != null">
                buildin = #{buildin,jdbcType=BIT},
            </if>
            <if test="lastchanged != null">
                lastchanged = #{lastchanged,jdbcType=TIMESTAMP},
            </if>
        </set>
        where region_id = #{regionId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.union.aimei.common.model.system.BaseRegion">
        update base_region
        set parent_id = #{parentId,jdbcType=INTEGER},
        region_name = #{regionName,jdbcType=VARCHAR},
        region_type = #{regionType,jdbcType=TINYINT},
        agency_id = #{agencyId,jdbcType=SMALLINT},
        region_sn = #{regionSn,jdbcType=VARCHAR},
        buildin = #{buildin,jdbcType=BIT},
        lastchanged = #{lastchanged,jdbcType=TIMESTAMP}
        where region_id = #{regionId,jdbcType=INTEGER}
    </update>
    <select id="selectByPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM base_region LIMIT #{offset},#{limit}
    </select>
    <select id="selectListByConditions" parameterType="com.union.aimei.common.model.system.BaseRegion"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_region
        <where>
            <if test="parentId != null">
                and parent_id = #{parentId,jdbcType=INTEGER}
            </if>
            <if test="regionName != null">
                and region_name = #{regionName,jdbcType=VARCHAR}
            </if>
            <if test="regionType != null">
                and region_type = #{regionType,jdbcType=TINYINT}
            </if>
            <if test="agencyId != null">
                and agency_id = #{agencyId,jdbcType=SMALLINT}
            </if>
            <if test="regionSn != null">
                and region_sn = #{regionSn,jdbcType=VARCHAR}
            </if>
            <if test="buildin != null">
                and buildin = #{buildin,jdbcType=BIT}
            </if>
            <if test="lastchanged != null">
                and lastchanged = #{lastchanged,jdbcType=TIMESTAMP}
            </if>
        </where>
    </select>

    <select id="listAreaByCityId" parameterType="java.util.Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_region
        where region_type = #{regionType}
        and parent_id = #{cityId}
    </select>

</mapper>