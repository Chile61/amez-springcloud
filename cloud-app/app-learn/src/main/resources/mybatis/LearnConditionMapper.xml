<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.union.aimei.learn.mapper.LearnConditionMapper" >
  <resultMap id="BaseResultMap" type="com.union.aimei.common.model.learn.LearnCondition" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="source_id" property="sourceId" jdbcType="INTEGER" />
    <result column="source_type" property="sourceType" jdbcType="TINYINT" />
    <result column="condition_name" property="conditionName" jdbcType="VARCHAR" />
    <result column="conditional_data" property="conditionalData" jdbcType="VARCHAR" />
    <result column="conditional_according" property="conditionalAccording" jdbcType="TINYINT" />
    <result column="conditional_type" property="conditionalType" jdbcType="TINYINT" />
    <result column="is_enabled" property="isEnabled" jdbcType="BIT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>

  <sql id="Base_Column_List" >
    id, source_id, source_type, condition_name, conditional_data, conditional_according, 
    conditional_type, is_enabled, create_time, update_time
  </sql>

  <sql id="BaseAliasColumn" >
    id, source_id AS sourceId, source_type AS sourceType, condition_name AS conditionName, 
    conditional_data AS conditionalData, conditional_according AS conditionalAccording, 
    conditional_type AS conditionalType, is_enabled AS isEnabled, create_time AS createTime, 
    update_time AS updateTime
  </sql>

  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from learn_condition
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from learn_condition
    where id = #{id,jdbcType=INTEGER}
  </delete>

  <insert id="insertSelective" parameterType="com.union.aimei.common.model.learn.LearnCondition" useGeneratedKeys="true" keyProperty="id" >
    insert into learn_condition
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sourceId != null" >
        source_id,
      </if>
      <if test="sourceType != null" >
        source_type,
      </if>
      <if test="conditionName != null" >
        condition_name,
      </if>
      <if test="conditionalData != null" >
        conditional_data,
      </if>
      <if test="conditionalAccording != null" >
        conditional_according,
      </if>
      <if test="conditionalType != null" >
        conditional_type,
      </if>
      <if test="isEnabled != null" >
        is_enabled,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="sourceId != null" >
        #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        #{sourceType,jdbcType=TINYINT},
      </if>
      <if test="conditionName != null" >
        #{conditionName,jdbcType=VARCHAR},
      </if>
      <if test="conditionalData != null" >
        #{conditionalData,jdbcType=VARCHAR},
      </if>
      <if test="conditionalAccording != null" >
        #{conditionalAccording,jdbcType=TINYINT},
      </if>
      <if test="conditionalType != null" >
        #{conditionalType,jdbcType=TINYINT},
      </if>
      <if test="isEnabled != null" >
        #{isEnabled,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.union.aimei.common.model.learn.LearnCondition" >
    update learn_condition
    <set >
      <if test="sourceId != null" >
        source_id = #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="sourceType != null" >
        source_type = #{sourceType,jdbcType=TINYINT},
      </if>
      <if test="conditionName != null" >
        condition_name = #{conditionName,jdbcType=VARCHAR},
      </if>
      <if test="conditionalData != null" >
        conditional_data = #{conditionalData,jdbcType=VARCHAR},
      </if>
      <if test="conditionalAccording != null" >
        conditional_according = #{conditionalAccording,jdbcType=TINYINT},
      </if>
      <if test="conditionalType != null" >
        conditional_type = #{conditionalType,jdbcType=TINYINT},
      </if>
      <if test="isEnabled != null" >
        is_enabled = #{isEnabled,jdbcType=BIT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectListByConditions" parameterType="com.union.aimei.common.model.learn.LearnCondition" resultMap="BaseResultMap" >
    select <include refid="Base_Column_List"/> from learn_condition
    <where >
      <if test="sourceId != null" >
        AND source_id = #{sourceId,jdbcType=INTEGER}
      </if>
      <if test="sourceType != null" >
        AND source_type = #{sourceType,jdbcType=TINYINT}
      </if>
      <if test="conditionName != null" >
        AND condition_name = #{conditionName,jdbcType=VARCHAR}
      </if>
      <if test="conditionalData != null" >
        AND conditional_data = #{conditionalData,jdbcType=VARCHAR}
      </if>
      <if test="conditionalAccording != null" >
        AND conditional_according = #{conditionalAccording,jdbcType=TINYINT}
      </if>
      <if test="conditionalType != null" >
        AND conditional_type = #{conditionalType,jdbcType=TINYINT}
      </if>
      <if test="isEnabled != null" >
        AND is_enabled = #{isEnabled,jdbcType=BIT}
      </if>
      <if test="createTime != null" >
        AND create_time = #{createTime,jdbcType=TIMESTAMP}
      </if>
      <if test="updateTime != null" >
        AND update_time = #{updateTime,jdbcType=TIMESTAMP}
      </if>
    </where>
  </select>
  
  <select id="selectLearnCourseIdAuthority" resultType="java.lang.Integer" parameterType="com.union.aimei.common.vo.learn.app.LearnAuthorityVo">
    SELECT DISTINCT
    IF
        (
        COUNT(
    CASE
        conditional_type
        WHEN 0 THEN
    IF
        ( conditional_data = #{storeBeautician.auditStatus} , source_id, NULL )
    <if test="storeBeautician.beauticianType == 3">
        WHEN 1 THEN
    IF
        ( conditional_data = #{storeBeautician.beauticianType}, source_id, NULL )
    </if>
    <if test="storeBeautician.beauticianType == 2">
        WHEN 2 THEN
    IF
        ( conditional_data = #{storeBeautician.beauticianType}, source_id, NULL )
    </if>
        WHEN 3 THEN
    IF
        ( IFNULL( conditional_data ,'') != IFNULL( #{storeBeautician.storeId} ,''), source_id, NULL )
        WHEN 4 THEN
    IF
        ( conditional_data = #{storeBeautician.levelId}, source_id, NULL )
        WHEN 5 THEN
    IF
        ( conditional_data = #{storeBeautician.beauticianStar}, source_id, NULL )
    END
    ) = count( * ) - 2 <if test="storeBeautician.beauticianType == 3"> +1 </if> <if test="storeBeautician.beauticianType == 2"> +1 </if>,
        source_id,
    NULL
        )
    FROM
        learn_condition
    WHERE
      is_enabled = true
    <if test="sourceType != null" >
      and source_type = #{sourceType,jdbcType=TINYINT}
    </if>
    GROUP BY
        source_id
  </select>

</mapper>