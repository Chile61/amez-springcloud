<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.union.aimei.pc.system.mapper.BaseSmsTemplateMapper">
    <resultMap id="BaseResultMap" type="com.union.aimei.common.model.system.BaseSmsTemplate">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="sms_name" jdbcType="VARCHAR" property="smsName"/>
        <result column="sms_code" jdbcType="VARCHAR" property="smsCode"/>
        <result column="sms_template" jdbcType="VARCHAR" property="smsTemplate"/>
        <result column="sms_type" jdbcType="TINYINT" property="smsType"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="remarks" jdbcType="VARCHAR" property="remarks"/>
        <result column="is_delete" jdbcType="TINYINT" property="isDelete"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, sms_name, sms_code, sms_template, sms_type, create_time, update_time, remarks,
        is_delete
    </sql>
    <select id="selectByExample" parameterType="com.union.aimei.common.model.system.BaseSmsTemplateExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from base_sms_template
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_sms_template
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from base_sms_template
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.union.aimei.common.model.system.BaseSmsTemplateExample">
        delete from base_sms_template
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.union.aimei.common.model.system.BaseSmsTemplate">
        insert into base_sms_template (id, sms_name, sms_code,
        sms_template, sms_type, create_time,
        update_time, remarks, is_delete
        )
        values (#{id,jdbcType=INTEGER}, #{smsName,jdbcType=VARCHAR}, #{smsCode,jdbcType=VARCHAR},
        #{smsTemplate,jdbcType=VARCHAR}, #{smsType,jdbcType=TINYINT}, #{createTime,jdbcType=TIMESTAMP},
        #{updateTime,jdbcType=TIMESTAMP}, #{remarks,jdbcType=VARCHAR}, #{isDelete,jdbcType=TINYINT}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.union.aimei.common.model.system.BaseSmsTemplate">
        insert into base_sms_template
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="smsName != null">
                sms_name,
            </if>
            <if test="smsCode != null">
                sms_code,
            </if>
            <if test="smsTemplate != null">
                sms_template,
            </if>
            <if test="smsType != null">
                sms_type,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="remarks != null">
                remarks,
            </if>
            <if test="isDelete != null">
                is_delete,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="smsName != null">
                #{smsName,jdbcType=VARCHAR},
            </if>
            <if test="smsCode != null">
                #{smsCode,jdbcType=VARCHAR},
            </if>
            <if test="smsTemplate != null">
                #{smsTemplate,jdbcType=VARCHAR},
            </if>
            <if test="smsType != null">
                #{smsType,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remarks != null">
                #{remarks,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                #{isDelete,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.union.aimei.common.model.system.BaseSmsTemplateExample"
            resultType="java.lang.Long">
        select count(*) from base_sms_template
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update base_sms_template
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.smsName != null">
                sms_name = #{record.smsName,jdbcType=VARCHAR},
            </if>
            <if test="record.smsCode != null">
                sms_code = #{record.smsCode,jdbcType=VARCHAR},
            </if>
            <if test="record.smsTemplate != null">
                sms_template = #{record.smsTemplate,jdbcType=VARCHAR},
            </if>
            <if test="record.smsType != null">
                sms_type = #{record.smsType,jdbcType=TINYINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.remarks != null">
                remarks = #{record.remarks,jdbcType=VARCHAR},
            </if>
            <if test="record.isDelete != null">
                is_delete = #{record.isDelete,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update base_sms_template
        set id = #{record.id,jdbcType=INTEGER},
        sms_name = #{record.smsName,jdbcType=VARCHAR},
        sms_code = #{record.smsCode,jdbcType=VARCHAR},
        sms_template = #{record.smsTemplate,jdbcType=VARCHAR},
        sms_type = #{record.smsType,jdbcType=TINYINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        remarks = #{record.remarks,jdbcType=VARCHAR},
        is_delete = #{record.isDelete,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.union.aimei.common.model.system.BaseSmsTemplate">
        update base_sms_template
        <set>
            <if test="smsName != null">
                sms_name = #{smsName,jdbcType=VARCHAR},
            </if>
            <if test="smsCode != null">
                sms_code = #{smsCode,jdbcType=VARCHAR},
            </if>
            <if test="smsTemplate != null">
                sms_template = #{smsTemplate,jdbcType=VARCHAR},
            </if>
            <if test="smsType != null">
                sms_type = #{smsType,jdbcType=TINYINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="remarks != null">
                remarks = #{remarks,jdbcType=VARCHAR},
            </if>
            <if test="isDelete != null">
                is_delete = #{isDelete,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.union.aimei.common.model.system.BaseSmsTemplate">
        update base_sms_template
        set sms_name = #{smsName,jdbcType=VARCHAR},
        sms_code = #{smsCode,jdbcType=VARCHAR},
        sms_template = #{smsTemplate,jdbcType=VARCHAR},
        sms_type = #{smsType,jdbcType=TINYINT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        remarks = #{remarks,jdbcType=VARCHAR},
        is_delete = #{isDelete,jdbcType=TINYINT}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="selectByPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM base_sms_template LIMIT #{offset},#{limit}
    </select>
    <select id="selectListByConditions" parameterType="com.union.aimei.common.model.system.BaseSmsTemplate"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from base_sms_template
        <where>
            <if test="smsName != null">
                and sms_name = #{smsName,jdbcType=VARCHAR}
            </if>
            <if test="smsCode != null">
                and sms_code = #{smsCode,jdbcType=VARCHAR}
            </if>
            <if test="smsTemplate != null">
                and sms_template = #{smsTemplate,jdbcType=VARCHAR}
            </if>
            <if test="smsType != null">
                and sms_type = #{smsType,jdbcType=TINYINT}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime,jdbcType=TIMESTAMP}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime,jdbcType=TIMESTAMP}
            </if>
            <if test="remarks != null">
                and remarks = #{remarks,jdbcType=VARCHAR}
            </if>
            <if test="isDelete != null">
                and is_delete = #{isDelete,jdbcType=TINYINT}
            </if>
        </where>
    </select>
</mapper>